
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model curso
 * 
 */
export type curso = $Result.DefaultSelection<Prisma.$cursoPayload>
/**
 * Model produto
 * 
 */
export type produto = $Result.DefaultSelection<Prisma.$produtoPayload>
/**
 * Model item_compra
 * 
 */
export type item_compra = $Result.DefaultSelection<Prisma.$item_compraPayload>
/**
 * Model compra
 * 
 */
export type compra = $Result.DefaultSelection<Prisma.$compraPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cursos
 * const cursos = await prisma.curso.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cursos
   * const cursos = await prisma.curso.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.curso`: Exposes CRUD operations for the **curso** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cursos
    * const cursos = await prisma.curso.findMany()
    * ```
    */
  get curso(): Prisma.cursoDelegate<ExtArgs>;

  /**
   * `prisma.produto`: Exposes CRUD operations for the **produto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produto.findMany()
    * ```
    */
  get produto(): Prisma.produtoDelegate<ExtArgs>;

  /**
   * `prisma.item_compra`: Exposes CRUD operations for the **item_compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Item_compras
    * const item_compras = await prisma.item_compra.findMany()
    * ```
    */
  get item_compra(): Prisma.item_compraDelegate<ExtArgs>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.compraDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    curso: 'curso',
    produto: 'produto',
    item_compra: 'item_compra',
    compra: 'compra'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'curso' | 'produto' | 'item_compra' | 'compra'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      curso: {
        payload: Prisma.$cursoPayload<ExtArgs>
        fields: Prisma.cursoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cursoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cursoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload>
          }
          findFirst: {
            args: Prisma.cursoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cursoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload>
          }
          findMany: {
            args: Prisma.cursoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload>[]
          }
          create: {
            args: Prisma.cursoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload>
          }
          createMany: {
            args: Prisma.cursoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cursoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload>
          }
          update: {
            args: Prisma.cursoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload>
          }
          deleteMany: {
            args: Prisma.cursoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cursoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cursoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cursoPayload>
          }
          aggregate: {
            args: Prisma.CursoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCurso>
          }
          groupBy: {
            args: Prisma.cursoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CursoGroupByOutputType>[]
          }
          count: {
            args: Prisma.cursoCountArgs<ExtArgs>,
            result: $Utils.Optional<CursoCountAggregateOutputType> | number
          }
        }
      }
      produto: {
        payload: Prisma.$produtoPayload<ExtArgs>
        fields: Prisma.produtoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.produtoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.produtoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload>
          }
          findFirst: {
            args: Prisma.produtoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.produtoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload>
          }
          findMany: {
            args: Prisma.produtoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload>[]
          }
          create: {
            args: Prisma.produtoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload>
          }
          createMany: {
            args: Prisma.produtoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.produtoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload>
          }
          update: {
            args: Prisma.produtoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload>
          }
          deleteMany: {
            args: Prisma.produtoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.produtoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.produtoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$produtoPayload>
          }
          aggregate: {
            args: Prisma.ProdutoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduto>
          }
          groupBy: {
            args: Prisma.produtoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoGroupByOutputType>[]
          }
          count: {
            args: Prisma.produtoCountArgs<ExtArgs>,
            result: $Utils.Optional<ProdutoCountAggregateOutputType> | number
          }
        }
      }
      item_compra: {
        payload: Prisma.$item_compraPayload<ExtArgs>
        fields: Prisma.item_compraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.item_compraFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.item_compraFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload>
          }
          findFirst: {
            args: Prisma.item_compraFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.item_compraFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload>
          }
          findMany: {
            args: Prisma.item_compraFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload>[]
          }
          create: {
            args: Prisma.item_compraCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload>
          }
          createMany: {
            args: Prisma.item_compraCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.item_compraDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload>
          }
          update: {
            args: Prisma.item_compraUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload>
          }
          deleteMany: {
            args: Prisma.item_compraDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.item_compraUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.item_compraUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$item_compraPayload>
          }
          aggregate: {
            args: Prisma.Item_compraAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateItem_compra>
          }
          groupBy: {
            args: Prisma.item_compraGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Item_compraGroupByOutputType>[]
          }
          count: {
            args: Prisma.item_compraCountArgs<ExtArgs>,
            result: $Utils.Optional<Item_compraCountAggregateOutputType> | number
          }
        }
      }
      compra: {
        payload: Prisma.$compraPayload<ExtArgs>
        fields: Prisma.compraFieldRefs
        operations: {
          findUnique: {
            args: Prisma.compraFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.compraFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          findFirst: {
            args: Prisma.compraFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.compraFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          findMany: {
            args: Prisma.compraFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>[]
          }
          create: {
            args: Prisma.compraCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          createMany: {
            args: Prisma.compraCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.compraDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          update: {
            args: Prisma.compraUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          deleteMany: {
            args: Prisma.compraDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.compraUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.compraUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$compraPayload>
          }
          aggregate: {
            args: Prisma.CompraAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompra>
          }
          groupBy: {
            args: Prisma.compraGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompraGroupByOutputType>[]
          }
          count: {
            args: Prisma.compraCountArgs<ExtArgs>,
            result: $Utils.Optional<CompraCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProdutoCountOutputType
   */

  export type ProdutoCountOutputType = {
    item_compra: number
  }

  export type ProdutoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item_compra?: boolean | ProdutoCountOutputTypeCountItem_compraArgs
  }

  // Custom InputTypes

  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCountOutputType
     */
    select?: ProdutoCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProdutoCountOutputType without action
   */
  export type ProdutoCountOutputTypeCountItem_compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: item_compraWhereInput
  }



  /**
   * Count Type CompraCountOutputType
   */

  export type CompraCountOutputType = {
    item_compra: number
  }

  export type CompraCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item_compra?: boolean | CompraCountOutputTypeCountItem_compraArgs
  }

  // Custom InputTypes

  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompraCountOutputType
     */
    select?: CompraCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompraCountOutputType without action
   */
  export type CompraCountOutputTypeCountItem_compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: item_compraWhereInput
  }



  /**
   * Models
   */

  /**
   * Model curso
   */

  export type AggregateCurso = {
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  export type CursoAvgAggregateOutputType = {
    id: number | null
  }

  export type CursoSumAggregateOutputType = {
    id: number | null
  }

  export type CursoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    turno: string | null
  }

  export type CursoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    turno: string | null
  }

  export type CursoCountAggregateOutputType = {
    id: number
    nome: number
    turno: number
    _all: number
  }


  export type CursoAvgAggregateInputType = {
    id?: true
  }

  export type CursoSumAggregateInputType = {
    id?: true
  }

  export type CursoMinAggregateInputType = {
    id?: true
    nome?: true
    turno?: true
  }

  export type CursoMaxAggregateInputType = {
    id?: true
    nome?: true
    turno?: true
  }

  export type CursoCountAggregateInputType = {
    id?: true
    nome?: true
    turno?: true
    _all?: true
  }

  export type CursoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which curso to aggregate.
     */
    where?: cursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursos to fetch.
     */
    orderBy?: cursoOrderByWithRelationInput | cursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cursos
    **/
    _count?: true | CursoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CursoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CursoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CursoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CursoMaxAggregateInputType
  }

  export type GetCursoAggregateType<T extends CursoAggregateArgs> = {
        [P in keyof T & keyof AggregateCurso]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCurso[P]>
      : GetScalarType<T[P], AggregateCurso[P]>
  }




  export type cursoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cursoWhereInput
    orderBy?: cursoOrderByWithAggregationInput | cursoOrderByWithAggregationInput[]
    by: CursoScalarFieldEnum[] | CursoScalarFieldEnum
    having?: cursoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CursoCountAggregateInputType | true
    _avg?: CursoAvgAggregateInputType
    _sum?: CursoSumAggregateInputType
    _min?: CursoMinAggregateInputType
    _max?: CursoMaxAggregateInputType
  }

  export type CursoGroupByOutputType = {
    id: number
    nome: string
    turno: string
    _count: CursoCountAggregateOutputType | null
    _avg: CursoAvgAggregateOutputType | null
    _sum: CursoSumAggregateOutputType | null
    _min: CursoMinAggregateOutputType | null
    _max: CursoMaxAggregateOutputType | null
  }

  type GetCursoGroupByPayload<T extends cursoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CursoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CursoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CursoGroupByOutputType[P]>
            : GetScalarType<T[P], CursoGroupByOutputType[P]>
        }
      >
    >


  export type cursoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    turno?: boolean
  }, ExtArgs["result"]["curso"]>

  export type cursoSelectScalar = {
    id?: boolean
    nome?: boolean
    turno?: boolean
  }


  export type $cursoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "curso"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      turno: string
    }, ExtArgs["result"]["curso"]>
    composites: {}
  }


  type cursoGetPayload<S extends boolean | null | undefined | cursoDefaultArgs> = $Result.GetResult<Prisma.$cursoPayload, S>

  type cursoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cursoFindManyArgs, 'select' | 'include'> & {
      select?: CursoCountAggregateInputType | true
    }

  export interface cursoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['curso'], meta: { name: 'curso' } }
    /**
     * Find zero or one Curso that matches the filter.
     * @param {cursoFindUniqueArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cursoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cursoFindUniqueArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Curso that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cursoFindUniqueOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cursoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cursoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Curso that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursoFindFirstArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cursoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cursoFindFirstArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Curso that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursoFindFirstOrThrowArgs} args - Arguments to find a Curso
     * @example
     * // Get one Curso
     * const curso = await prisma.curso.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cursoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cursoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cursos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cursos
     * const cursos = await prisma.curso.findMany()
     * 
     * // Get first 10 Cursos
     * const cursos = await prisma.curso.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cursoWithIdOnly = await prisma.curso.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends cursoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cursoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Curso.
     * @param {cursoCreateArgs} args - Arguments to create a Curso.
     * @example
     * // Create one Curso
     * const Curso = await prisma.curso.create({
     *   data: {
     *     // ... data to create a Curso
     *   }
     * })
     * 
    **/
    create<T extends cursoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cursoCreateArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cursos.
     *     @param {cursoCreateManyArgs} args - Arguments to create many Cursos.
     *     @example
     *     // Create many Cursos
     *     const curso = await prisma.curso.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cursoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cursoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Curso.
     * @param {cursoDeleteArgs} args - Arguments to delete one Curso.
     * @example
     * // Delete one Curso
     * const Curso = await prisma.curso.delete({
     *   where: {
     *     // ... filter to delete one Curso
     *   }
     * })
     * 
    **/
    delete<T extends cursoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cursoDeleteArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Curso.
     * @param {cursoUpdateArgs} args - Arguments to update one Curso.
     * @example
     * // Update one Curso
     * const curso = await prisma.curso.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cursoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cursoUpdateArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cursos.
     * @param {cursoDeleteManyArgs} args - Arguments to filter Cursos to delete.
     * @example
     * // Delete a few Cursos
     * const { count } = await prisma.curso.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cursoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cursoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cursos
     * const curso = await prisma.curso.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cursoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cursoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Curso.
     * @param {cursoUpsertArgs} args - Arguments to update or create a Curso.
     * @example
     * // Update or create a Curso
     * const curso = await prisma.curso.upsert({
     *   create: {
     *     // ... data to create a Curso
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Curso we want to update
     *   }
     * })
    **/
    upsert<T extends cursoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cursoUpsertArgs<ExtArgs>>
    ): Prisma__cursoClient<$Result.GetResult<Prisma.$cursoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cursos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursoCountArgs} args - Arguments to filter Cursos to count.
     * @example
     * // Count the number of Cursos
     * const count = await prisma.curso.count({
     *   where: {
     *     // ... the filter for the Cursos we want to count
     *   }
     * })
    **/
    count<T extends cursoCountArgs>(
      args?: Subset<T, cursoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CursoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CursoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CursoAggregateArgs>(args: Subset<T, CursoAggregateArgs>): Prisma.PrismaPromise<GetCursoAggregateType<T>>

    /**
     * Group by Curso.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cursoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cursoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cursoGroupByArgs['orderBy'] }
        : { orderBy?: cursoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cursoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCursoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the curso model
   */
  readonly fields: cursoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for curso.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cursoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the curso model
   */ 
  interface cursoFieldRefs {
    readonly id: FieldRef<"curso", 'Int'>
    readonly nome: FieldRef<"curso", 'String'>
    readonly turno: FieldRef<"curso", 'String'>
  }
    

  // Custom InputTypes

  /**
   * curso findUnique
   */
  export type cursoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * Filter, which curso to fetch.
     */
    where: cursoWhereUniqueInput
  }


  /**
   * curso findUniqueOrThrow
   */
  export type cursoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * Filter, which curso to fetch.
     */
    where: cursoWhereUniqueInput
  }


  /**
   * curso findFirst
   */
  export type cursoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * Filter, which curso to fetch.
     */
    where?: cursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursos to fetch.
     */
    orderBy?: cursoOrderByWithRelationInput | cursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cursos.
     */
    cursor?: cursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * curso findFirstOrThrow
   */
  export type cursoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * Filter, which curso to fetch.
     */
    where?: cursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursos to fetch.
     */
    orderBy?: cursoOrderByWithRelationInput | cursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cursos.
     */
    cursor?: cursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cursos.
     */
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * curso findMany
   */
  export type cursoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * Filter, which cursos to fetch.
     */
    where?: cursoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cursos to fetch.
     */
    orderBy?: cursoOrderByWithRelationInput | cursoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cursos.
     */
    cursor?: cursoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cursos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cursos.
     */
    skip?: number
    distinct?: CursoScalarFieldEnum | CursoScalarFieldEnum[]
  }


  /**
   * curso create
   */
  export type cursoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * The data needed to create a curso.
     */
    data: XOR<cursoCreateInput, cursoUncheckedCreateInput>
  }


  /**
   * curso createMany
   */
  export type cursoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cursos.
     */
    data: cursoCreateManyInput | cursoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * curso update
   */
  export type cursoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * The data needed to update a curso.
     */
    data: XOR<cursoUpdateInput, cursoUncheckedUpdateInput>
    /**
     * Choose, which curso to update.
     */
    where: cursoWhereUniqueInput
  }


  /**
   * curso updateMany
   */
  export type cursoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cursos.
     */
    data: XOR<cursoUpdateManyMutationInput, cursoUncheckedUpdateManyInput>
    /**
     * Filter which cursos to update
     */
    where?: cursoWhereInput
  }


  /**
   * curso upsert
   */
  export type cursoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * The filter to search for the curso to update in case it exists.
     */
    where: cursoWhereUniqueInput
    /**
     * In case the curso found by the `where` argument doesn't exist, create a new curso with this data.
     */
    create: XOR<cursoCreateInput, cursoUncheckedCreateInput>
    /**
     * In case the curso was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cursoUpdateInput, cursoUncheckedUpdateInput>
  }


  /**
   * curso delete
   */
  export type cursoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
    /**
     * Filter which curso to delete.
     */
    where: cursoWhereUniqueInput
  }


  /**
   * curso deleteMany
   */
  export type cursoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cursos to delete
     */
    where?: cursoWhereInput
  }


  /**
   * curso without action
   */
  export type cursoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the curso
     */
    select?: cursoSelect<ExtArgs> | null
  }



  /**
   * Model produto
   */

  export type AggregateProduto = {
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  export type ProdutoAvgAggregateOutputType = {
    id: number | null
  }

  export type ProdutoSumAggregateOutputType = {
    id: number | null
  }

  export type ProdutoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
  }

  export type ProdutoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    descricao: string | null
  }

  export type ProdutoCountAggregateOutputType = {
    id: number
    nome: number
    descricao: number
    _all: number
  }


  export type ProdutoAvgAggregateInputType = {
    id?: true
  }

  export type ProdutoSumAggregateInputType = {
    id?: true
  }

  export type ProdutoMinAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
  }

  export type ProdutoMaxAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
  }

  export type ProdutoCountAggregateInputType = {
    id?: true
    nome?: true
    descricao?: true
    _all?: true
  }

  export type ProdutoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which produto to aggregate.
     */
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     */
    orderBy?: produtoOrderByWithRelationInput | produtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned produtos
    **/
    _count?: true | ProdutoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoMaxAggregateInputType
  }

  export type GetProdutoAggregateType<T extends ProdutoAggregateArgs> = {
        [P in keyof T & keyof AggregateProduto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduto[P]>
      : GetScalarType<T[P], AggregateProduto[P]>
  }




  export type produtoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: produtoWhereInput
    orderBy?: produtoOrderByWithAggregationInput | produtoOrderByWithAggregationInput[]
    by: ProdutoScalarFieldEnum[] | ProdutoScalarFieldEnum
    having?: produtoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCountAggregateInputType | true
    _avg?: ProdutoAvgAggregateInputType
    _sum?: ProdutoSumAggregateInputType
    _min?: ProdutoMinAggregateInputType
    _max?: ProdutoMaxAggregateInputType
  }

  export type ProdutoGroupByOutputType = {
    id: number
    nome: string
    descricao: string
    _count: ProdutoCountAggregateOutputType | null
    _avg: ProdutoAvgAggregateOutputType | null
    _sum: ProdutoSumAggregateOutputType | null
    _min: ProdutoMinAggregateOutputType | null
    _max: ProdutoMaxAggregateOutputType | null
  }

  type GetProdutoGroupByPayload<T extends produtoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoGroupByOutputType[P]>
        }
      >
    >


  export type produtoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    descricao?: boolean
    item_compra?: boolean | produto$item_compraArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produto"]>

  export type produtoSelectScalar = {
    id?: boolean
    nome?: boolean
    descricao?: boolean
  }

  export type produtoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item_compra?: boolean | produto$item_compraArgs<ExtArgs>
    _count?: boolean | ProdutoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $produtoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "produto"
    objects: {
      item_compra: Prisma.$item_compraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      descricao: string
    }, ExtArgs["result"]["produto"]>
    composites: {}
  }


  type produtoGetPayload<S extends boolean | null | undefined | produtoDefaultArgs> = $Result.GetResult<Prisma.$produtoPayload, S>

  type produtoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<produtoFindManyArgs, 'select' | 'include'> & {
      select?: ProdutoCountAggregateInputType | true
    }

  export interface produtoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['produto'], meta: { name: 'produto' } }
    /**
     * Find zero or one Produto that matches the filter.
     * @param {produtoFindUniqueArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends produtoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, produtoFindUniqueArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Produto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {produtoFindUniqueOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends produtoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, produtoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Produto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindFirstArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends produtoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, produtoFindFirstArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Produto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindFirstOrThrowArgs} args - Arguments to find a Produto
     * @example
     * // Get one Produto
     * const produto = await prisma.produto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends produtoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, produtoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produto.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoWithIdOnly = await prisma.produto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends produtoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, produtoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Produto.
     * @param {produtoCreateArgs} args - Arguments to create a Produto.
     * @example
     * // Create one Produto
     * const Produto = await prisma.produto.create({
     *   data: {
     *     // ... data to create a Produto
     *   }
     * })
     * 
    **/
    create<T extends produtoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, produtoCreateArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Produtos.
     *     @param {produtoCreateManyArgs} args - Arguments to create many Produtos.
     *     @example
     *     // Create many Produtos
     *     const produto = await prisma.produto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends produtoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, produtoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produto.
     * @param {produtoDeleteArgs} args - Arguments to delete one Produto.
     * @example
     * // Delete one Produto
     * const Produto = await prisma.produto.delete({
     *   where: {
     *     // ... filter to delete one Produto
     *   }
     * })
     * 
    **/
    delete<T extends produtoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, produtoDeleteArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Produto.
     * @param {produtoUpdateArgs} args - Arguments to update one Produto.
     * @example
     * // Update one Produto
     * const produto = await prisma.produto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends produtoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, produtoUpdateArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {produtoDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends produtoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, produtoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produto = await prisma.produto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends produtoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, produtoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produto.
     * @param {produtoUpsertArgs} args - Arguments to update or create a Produto.
     * @example
     * // Update or create a Produto
     * const produto = await prisma.produto.upsert({
     *   create: {
     *     // ... data to create a Produto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produto we want to update
     *   }
     * })
    **/
    upsert<T extends produtoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, produtoUpsertArgs<ExtArgs>>
    ): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produto.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends produtoCountArgs>(
      args?: Subset<T, produtoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoAggregateArgs>(args: Subset<T, ProdutoAggregateArgs>): Prisma.PrismaPromise<GetProdutoAggregateType<T>>

    /**
     * Group by Produto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {produtoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends produtoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: produtoGroupByArgs['orderBy'] }
        : { orderBy?: produtoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, produtoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the produto model
   */
  readonly fields: produtoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for produto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__produtoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    item_compra<T extends produto$item_compraArgs<ExtArgs> = {}>(args?: Subset<T, produto$item_compraArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the produto model
   */ 
  interface produtoFieldRefs {
    readonly id: FieldRef<"produto", 'Int'>
    readonly nome: FieldRef<"produto", 'String'>
    readonly descricao: FieldRef<"produto", 'String'>
  }
    

  // Custom InputTypes

  /**
   * produto findUnique
   */
  export type produtoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * Filter, which produto to fetch.
     */
    where: produtoWhereUniqueInput
  }


  /**
   * produto findUniqueOrThrow
   */
  export type produtoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * Filter, which produto to fetch.
     */
    where: produtoWhereUniqueInput
  }


  /**
   * produto findFirst
   */
  export type produtoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * Filter, which produto to fetch.
     */
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     */
    orderBy?: produtoOrderByWithRelationInput | produtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produtos.
     */
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * produto findFirstOrThrow
   */
  export type produtoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * Filter, which produto to fetch.
     */
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     */
    orderBy?: produtoOrderByWithRelationInput | produtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for produtos.
     */
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of produtos.
     */
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * produto findMany
   */
  export type produtoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * Filter, which produtos to fetch.
     */
    where?: produtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of produtos to fetch.
     */
    orderBy?: produtoOrderByWithRelationInput | produtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing produtos.
     */
    cursor?: produtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` produtos.
     */
    skip?: number
    distinct?: ProdutoScalarFieldEnum | ProdutoScalarFieldEnum[]
  }


  /**
   * produto create
   */
  export type produtoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * The data needed to create a produto.
     */
    data: XOR<produtoCreateInput, produtoUncheckedCreateInput>
  }


  /**
   * produto createMany
   */
  export type produtoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many produtos.
     */
    data: produtoCreateManyInput | produtoCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * produto update
   */
  export type produtoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * The data needed to update a produto.
     */
    data: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
    /**
     * Choose, which produto to update.
     */
    where: produtoWhereUniqueInput
  }


  /**
   * produto updateMany
   */
  export type produtoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update produtos.
     */
    data: XOR<produtoUpdateManyMutationInput, produtoUncheckedUpdateManyInput>
    /**
     * Filter which produtos to update
     */
    where?: produtoWhereInput
  }


  /**
   * produto upsert
   */
  export type produtoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * The filter to search for the produto to update in case it exists.
     */
    where: produtoWhereUniqueInput
    /**
     * In case the produto found by the `where` argument doesn't exist, create a new produto with this data.
     */
    create: XOR<produtoCreateInput, produtoUncheckedCreateInput>
    /**
     * In case the produto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<produtoUpdateInput, produtoUncheckedUpdateInput>
  }


  /**
   * produto delete
   */
  export type produtoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
    /**
     * Filter which produto to delete.
     */
    where: produtoWhereUniqueInput
  }


  /**
   * produto deleteMany
   */
  export type produtoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which produtos to delete
     */
    where?: produtoWhereInput
  }


  /**
   * produto.item_compra
   */
  export type produto$item_compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    where?: item_compraWhereInput
    orderBy?: item_compraOrderByWithRelationInput | item_compraOrderByWithRelationInput[]
    cursor?: item_compraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Item_compraScalarFieldEnum | Item_compraScalarFieldEnum[]
  }


  /**
   * produto without action
   */
  export type produtoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the produto
     */
    select?: produtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: produtoInclude<ExtArgs> | null
  }



  /**
   * Model item_compra
   */

  export type AggregateItem_compra = {
    _count: Item_compraCountAggregateOutputType | null
    _avg: Item_compraAvgAggregateOutputType | null
    _sum: Item_compraSumAggregateOutputType | null
    _min: Item_compraMinAggregateOutputType | null
    _max: Item_compraMaxAggregateOutputType | null
  }

  export type Item_compraAvgAggregateOutputType = {
    id: number | null
    quantidade: number | null
    preco: number | null
    produto_id: number | null
    compra_id: number | null
  }

  export type Item_compraSumAggregateOutputType = {
    id: number | null
    quantidade: number | null
    preco: number | null
    produto_id: number | null
    compra_id: number | null
  }

  export type Item_compraMinAggregateOutputType = {
    id: number | null
    quantidade: number | null
    preco: number | null
    produto_id: number | null
    compra_id: number | null
  }

  export type Item_compraMaxAggregateOutputType = {
    id: number | null
    quantidade: number | null
    preco: number | null
    produto_id: number | null
    compra_id: number | null
  }

  export type Item_compraCountAggregateOutputType = {
    id: number
    quantidade: number
    preco: number
    produto_id: number
    compra_id: number
    _all: number
  }


  export type Item_compraAvgAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    produto_id?: true
    compra_id?: true
  }

  export type Item_compraSumAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    produto_id?: true
    compra_id?: true
  }

  export type Item_compraMinAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    produto_id?: true
    compra_id?: true
  }

  export type Item_compraMaxAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    produto_id?: true
    compra_id?: true
  }

  export type Item_compraCountAggregateInputType = {
    id?: true
    quantidade?: true
    preco?: true
    produto_id?: true
    compra_id?: true
    _all?: true
  }

  export type Item_compraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which item_compra to aggregate.
     */
    where?: item_compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_compras to fetch.
     */
    orderBy?: item_compraOrderByWithRelationInput | item_compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: item_compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned item_compras
    **/
    _count?: true | Item_compraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Item_compraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Item_compraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Item_compraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Item_compraMaxAggregateInputType
  }

  export type GetItem_compraAggregateType<T extends Item_compraAggregateArgs> = {
        [P in keyof T & keyof AggregateItem_compra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateItem_compra[P]>
      : GetScalarType<T[P], AggregateItem_compra[P]>
  }




  export type item_compraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: item_compraWhereInput
    orderBy?: item_compraOrderByWithAggregationInput | item_compraOrderByWithAggregationInput[]
    by: Item_compraScalarFieldEnum[] | Item_compraScalarFieldEnum
    having?: item_compraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Item_compraCountAggregateInputType | true
    _avg?: Item_compraAvgAggregateInputType
    _sum?: Item_compraSumAggregateInputType
    _min?: Item_compraMinAggregateInputType
    _max?: Item_compraMaxAggregateInputType
  }

  export type Item_compraGroupByOutputType = {
    id: number
    quantidade: number
    preco: number
    produto_id: number
    compra_id: number | null
    _count: Item_compraCountAggregateOutputType | null
    _avg: Item_compraAvgAggregateOutputType | null
    _sum: Item_compraSumAggregateOutputType | null
    _min: Item_compraMinAggregateOutputType | null
    _max: Item_compraMaxAggregateOutputType | null
  }

  type GetItem_compraGroupByPayload<T extends item_compraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Item_compraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Item_compraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Item_compraGroupByOutputType[P]>
            : GetScalarType<T[P], Item_compraGroupByOutputType[P]>
        }
      >
    >


  export type item_compraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantidade?: boolean
    preco?: boolean
    produto_id?: boolean
    compra_id?: boolean
    produto?: boolean | produtoDefaultArgs<ExtArgs>
    compra?: boolean | item_compra$compraArgs<ExtArgs>
  }, ExtArgs["result"]["item_compra"]>

  export type item_compraSelectScalar = {
    id?: boolean
    quantidade?: boolean
    preco?: boolean
    produto_id?: boolean
    compra_id?: boolean
  }

  export type item_compraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produto?: boolean | produtoDefaultArgs<ExtArgs>
    compra?: boolean | item_compra$compraArgs<ExtArgs>
  }


  export type $item_compraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "item_compra"
    objects: {
      produto: Prisma.$produtoPayload<ExtArgs>
      compra: Prisma.$compraPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      quantidade: number
      preco: number
      produto_id: number
      compra_id: number | null
    }, ExtArgs["result"]["item_compra"]>
    composites: {}
  }


  type item_compraGetPayload<S extends boolean | null | undefined | item_compraDefaultArgs> = $Result.GetResult<Prisma.$item_compraPayload, S>

  type item_compraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<item_compraFindManyArgs, 'select' | 'include'> & {
      select?: Item_compraCountAggregateInputType | true
    }

  export interface item_compraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['item_compra'], meta: { name: 'item_compra' } }
    /**
     * Find zero or one Item_compra that matches the filter.
     * @param {item_compraFindUniqueArgs} args - Arguments to find a Item_compra
     * @example
     * // Get one Item_compra
     * const item_compra = await prisma.item_compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends item_compraFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, item_compraFindUniqueArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Item_compra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {item_compraFindUniqueOrThrowArgs} args - Arguments to find a Item_compra
     * @example
     * // Get one Item_compra
     * const item_compra = await prisma.item_compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends item_compraFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, item_compraFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Item_compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_compraFindFirstArgs} args - Arguments to find a Item_compra
     * @example
     * // Get one Item_compra
     * const item_compra = await prisma.item_compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends item_compraFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, item_compraFindFirstArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Item_compra that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_compraFindFirstOrThrowArgs} args - Arguments to find a Item_compra
     * @example
     * // Get one Item_compra
     * const item_compra = await prisma.item_compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends item_compraFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, item_compraFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Item_compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_compraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Item_compras
     * const item_compras = await prisma.item_compra.findMany()
     * 
     * // Get first 10 Item_compras
     * const item_compras = await prisma.item_compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const item_compraWithIdOnly = await prisma.item_compra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends item_compraFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, item_compraFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Item_compra.
     * @param {item_compraCreateArgs} args - Arguments to create a Item_compra.
     * @example
     * // Create one Item_compra
     * const Item_compra = await prisma.item_compra.create({
     *   data: {
     *     // ... data to create a Item_compra
     *   }
     * })
     * 
    **/
    create<T extends item_compraCreateArgs<ExtArgs>>(
      args: SelectSubset<T, item_compraCreateArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Item_compras.
     *     @param {item_compraCreateManyArgs} args - Arguments to create many Item_compras.
     *     @example
     *     // Create many Item_compras
     *     const item_compra = await prisma.item_compra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends item_compraCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, item_compraCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Item_compra.
     * @param {item_compraDeleteArgs} args - Arguments to delete one Item_compra.
     * @example
     * // Delete one Item_compra
     * const Item_compra = await prisma.item_compra.delete({
     *   where: {
     *     // ... filter to delete one Item_compra
     *   }
     * })
     * 
    **/
    delete<T extends item_compraDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, item_compraDeleteArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Item_compra.
     * @param {item_compraUpdateArgs} args - Arguments to update one Item_compra.
     * @example
     * // Update one Item_compra
     * const item_compra = await prisma.item_compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends item_compraUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, item_compraUpdateArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Item_compras.
     * @param {item_compraDeleteManyArgs} args - Arguments to filter Item_compras to delete.
     * @example
     * // Delete a few Item_compras
     * const { count } = await prisma.item_compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends item_compraDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, item_compraDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Item_compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_compraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Item_compras
     * const item_compra = await prisma.item_compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends item_compraUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, item_compraUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Item_compra.
     * @param {item_compraUpsertArgs} args - Arguments to update or create a Item_compra.
     * @example
     * // Update or create a Item_compra
     * const item_compra = await prisma.item_compra.upsert({
     *   create: {
     *     // ... data to create a Item_compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Item_compra we want to update
     *   }
     * })
    **/
    upsert<T extends item_compraUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, item_compraUpsertArgs<ExtArgs>>
    ): Prisma__item_compraClient<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Item_compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_compraCountArgs} args - Arguments to filter Item_compras to count.
     * @example
     * // Count the number of Item_compras
     * const count = await prisma.item_compra.count({
     *   where: {
     *     // ... the filter for the Item_compras we want to count
     *   }
     * })
    **/
    count<T extends item_compraCountArgs>(
      args?: Subset<T, item_compraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Item_compraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Item_compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Item_compraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Item_compraAggregateArgs>(args: Subset<T, Item_compraAggregateArgs>): Prisma.PrismaPromise<GetItem_compraAggregateType<T>>

    /**
     * Group by Item_compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {item_compraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends item_compraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: item_compraGroupByArgs['orderBy'] }
        : { orderBy?: item_compraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, item_compraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetItem_compraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the item_compra model
   */
  readonly fields: item_compraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for item_compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__item_compraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    produto<T extends produtoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, produtoDefaultArgs<ExtArgs>>): Prisma__produtoClient<$Result.GetResult<Prisma.$produtoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    compra<T extends item_compra$compraArgs<ExtArgs> = {}>(args?: Subset<T, item_compra$compraArgs<ExtArgs>>): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the item_compra model
   */ 
  interface item_compraFieldRefs {
    readonly id: FieldRef<"item_compra", 'Int'>
    readonly quantidade: FieldRef<"item_compra", 'Int'>
    readonly preco: FieldRef<"item_compra", 'Float'>
    readonly produto_id: FieldRef<"item_compra", 'Int'>
    readonly compra_id: FieldRef<"item_compra", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * item_compra findUnique
   */
  export type item_compraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * Filter, which item_compra to fetch.
     */
    where: item_compraWhereUniqueInput
  }


  /**
   * item_compra findUniqueOrThrow
   */
  export type item_compraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * Filter, which item_compra to fetch.
     */
    where: item_compraWhereUniqueInput
  }


  /**
   * item_compra findFirst
   */
  export type item_compraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * Filter, which item_compra to fetch.
     */
    where?: item_compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_compras to fetch.
     */
    orderBy?: item_compraOrderByWithRelationInput | item_compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for item_compras.
     */
    cursor?: item_compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of item_compras.
     */
    distinct?: Item_compraScalarFieldEnum | Item_compraScalarFieldEnum[]
  }


  /**
   * item_compra findFirstOrThrow
   */
  export type item_compraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * Filter, which item_compra to fetch.
     */
    where?: item_compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_compras to fetch.
     */
    orderBy?: item_compraOrderByWithRelationInput | item_compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for item_compras.
     */
    cursor?: item_compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of item_compras.
     */
    distinct?: Item_compraScalarFieldEnum | Item_compraScalarFieldEnum[]
  }


  /**
   * item_compra findMany
   */
  export type item_compraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * Filter, which item_compras to fetch.
     */
    where?: item_compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of item_compras to fetch.
     */
    orderBy?: item_compraOrderByWithRelationInput | item_compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing item_compras.
     */
    cursor?: item_compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` item_compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` item_compras.
     */
    skip?: number
    distinct?: Item_compraScalarFieldEnum | Item_compraScalarFieldEnum[]
  }


  /**
   * item_compra create
   */
  export type item_compraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * The data needed to create a item_compra.
     */
    data: XOR<item_compraCreateInput, item_compraUncheckedCreateInput>
  }


  /**
   * item_compra createMany
   */
  export type item_compraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many item_compras.
     */
    data: item_compraCreateManyInput | item_compraCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * item_compra update
   */
  export type item_compraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * The data needed to update a item_compra.
     */
    data: XOR<item_compraUpdateInput, item_compraUncheckedUpdateInput>
    /**
     * Choose, which item_compra to update.
     */
    where: item_compraWhereUniqueInput
  }


  /**
   * item_compra updateMany
   */
  export type item_compraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update item_compras.
     */
    data: XOR<item_compraUpdateManyMutationInput, item_compraUncheckedUpdateManyInput>
    /**
     * Filter which item_compras to update
     */
    where?: item_compraWhereInput
  }


  /**
   * item_compra upsert
   */
  export type item_compraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * The filter to search for the item_compra to update in case it exists.
     */
    where: item_compraWhereUniqueInput
    /**
     * In case the item_compra found by the `where` argument doesn't exist, create a new item_compra with this data.
     */
    create: XOR<item_compraCreateInput, item_compraUncheckedCreateInput>
    /**
     * In case the item_compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<item_compraUpdateInput, item_compraUncheckedUpdateInput>
  }


  /**
   * item_compra delete
   */
  export type item_compraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    /**
     * Filter which item_compra to delete.
     */
    where: item_compraWhereUniqueInput
  }


  /**
   * item_compra deleteMany
   */
  export type item_compraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which item_compras to delete
     */
    where?: item_compraWhereInput
  }


  /**
   * item_compra.compra
   */
  export type item_compra$compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    where?: compraWhereInput
  }


  /**
   * item_compra without action
   */
  export type item_compraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
  }



  /**
   * Model compra
   */

  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id: number | null
  }

  export type CompraSumAggregateOutputType = {
    id: number | null
  }

  export type CompraMinAggregateOutputType = {
    id: number | null
    data: Date | null
    estado_compra: string | null
  }

  export type CompraMaxAggregateOutputType = {
    id: number | null
    data: Date | null
    estado_compra: string | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    data: number
    estado_compra: number
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id?: true
  }

  export type CompraSumAggregateInputType = {
    id?: true
  }

  export type CompraMinAggregateInputType = {
    id?: true
    data?: true
    estado_compra?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    data?: true
    estado_compra?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    data?: true
    estado_compra?: true
    _all?: true
  }

  export type CompraAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which compra to aggregate.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type compraGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: compraWhereInput
    orderBy?: compraOrderByWithAggregationInput | compraOrderByWithAggregationInput[]
    by: CompraScalarFieldEnum[] | CompraScalarFieldEnum
    having?: compraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _avg?: CompraAvgAggregateInputType
    _sum?: CompraSumAggregateInputType
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }

  export type CompraGroupByOutputType = {
    id: number
    data: Date
    estado_compra: string
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends compraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type compraSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    estado_compra?: boolean
    item_compra?: boolean | compra$item_compraArgs<ExtArgs>
    _count?: boolean | CompraCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["compra"]>

  export type compraSelectScalar = {
    id?: boolean
    data?: boolean
    estado_compra?: boolean
  }

  export type compraInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    item_compra?: boolean | compra$item_compraArgs<ExtArgs>
    _count?: boolean | CompraCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $compraPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "compra"
    objects: {
      item_compra: Prisma.$item_compraPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data: Date
      estado_compra: string
    }, ExtArgs["result"]["compra"]>
    composites: {}
  }


  type compraGetPayload<S extends boolean | null | undefined | compraDefaultArgs> = $Result.GetResult<Prisma.$compraPayload, S>

  type compraCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<compraFindManyArgs, 'select' | 'include'> & {
      select?: CompraCountAggregateInputType | true
    }

  export interface compraDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['compra'], meta: { name: 'compra' } }
    /**
     * Find zero or one Compra that matches the filter.
     * @param {compraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends compraFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, compraFindUniqueArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Compra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {compraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends compraFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends compraFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindFirstArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Compra that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends compraFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends compraFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compraFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Compra.
     * @param {compraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
    **/
    create<T extends compraCreateArgs<ExtArgs>>(
      args: SelectSubset<T, compraCreateArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Compras.
     *     @param {compraCreateManyArgs} args - Arguments to create many Compras.
     *     @example
     *     // Create many Compras
     *     const compra = await prisma.compra.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends compraCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compraCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Compra.
     * @param {compraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
    **/
    delete<T extends compraDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, compraDeleteArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Compra.
     * @param {compraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends compraUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, compraUpdateArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Compras.
     * @param {compraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends compraDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, compraDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends compraUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, compraUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {compraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
    **/
    upsert<T extends compraUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, compraUpsertArgs<ExtArgs>>
    ): Prisma__compraClient<$Result.GetResult<Prisma.$compraPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends compraCountArgs>(
      args?: Subset<T, compraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {compraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends compraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: compraGroupByArgs['orderBy'] }
        : { orderBy?: compraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, compraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the compra model
   */
  readonly fields: compraFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__compraClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    item_compra<T extends compra$item_compraArgs<ExtArgs> = {}>(args?: Subset<T, compra$item_compraArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$item_compraPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the compra model
   */ 
  interface compraFieldRefs {
    readonly id: FieldRef<"compra", 'Int'>
    readonly data: FieldRef<"compra", 'DateTime'>
    readonly estado_compra: FieldRef<"compra", 'String'>
  }
    

  // Custom InputTypes

  /**
   * compra findUnique
   */
  export type compraFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra findUniqueOrThrow
   */
  export type compraFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra findFirst
   */
  export type compraFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }


  /**
   * compra findFirstOrThrow
   */
  export type compraFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compra to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of compras.
     */
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }


  /**
   * compra findMany
   */
  export type compraFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter, which compras to fetch.
     */
    where?: compraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of compras to fetch.
     */
    orderBy?: compraOrderByWithRelationInput | compraOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing compras.
     */
    cursor?: compraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` compras.
     */
    skip?: number
    distinct?: CompraScalarFieldEnum | CompraScalarFieldEnum[]
  }


  /**
   * compra create
   */
  export type compraCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * The data needed to create a compra.
     */
    data: XOR<compraCreateInput, compraUncheckedCreateInput>
  }


  /**
   * compra createMany
   */
  export type compraCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many compras.
     */
    data: compraCreateManyInput | compraCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * compra update
   */
  export type compraUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * The data needed to update a compra.
     */
    data: XOR<compraUpdateInput, compraUncheckedUpdateInput>
    /**
     * Choose, which compra to update.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra updateMany
   */
  export type compraUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update compras.
     */
    data: XOR<compraUpdateManyMutationInput, compraUncheckedUpdateManyInput>
    /**
     * Filter which compras to update
     */
    where?: compraWhereInput
  }


  /**
   * compra upsert
   */
  export type compraUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * The filter to search for the compra to update in case it exists.
     */
    where: compraWhereUniqueInput
    /**
     * In case the compra found by the `where` argument doesn't exist, create a new compra with this data.
     */
    create: XOR<compraCreateInput, compraUncheckedCreateInput>
    /**
     * In case the compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<compraUpdateInput, compraUncheckedUpdateInput>
  }


  /**
   * compra delete
   */
  export type compraDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
    /**
     * Filter which compra to delete.
     */
    where: compraWhereUniqueInput
  }


  /**
   * compra deleteMany
   */
  export type compraDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which compras to delete
     */
    where?: compraWhereInput
  }


  /**
   * compra.item_compra
   */
  export type compra$item_compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the item_compra
     */
    select?: item_compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: item_compraInclude<ExtArgs> | null
    where?: item_compraWhereInput
    orderBy?: item_compraOrderByWithRelationInput | item_compraOrderByWithRelationInput[]
    cursor?: item_compraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Item_compraScalarFieldEnum | Item_compraScalarFieldEnum[]
  }


  /**
   * compra without action
   */
  export type compraDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the compra
     */
    select?: compraSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: compraInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CursoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    turno: 'turno'
  };

  export type CursoScalarFieldEnum = (typeof CursoScalarFieldEnum)[keyof typeof CursoScalarFieldEnum]


  export const ProdutoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    descricao: 'descricao'
  };

  export type ProdutoScalarFieldEnum = (typeof ProdutoScalarFieldEnum)[keyof typeof ProdutoScalarFieldEnum]


  export const Item_compraScalarFieldEnum: {
    id: 'id',
    quantidade: 'quantidade',
    preco: 'preco',
    produto_id: 'produto_id',
    compra_id: 'compra_id'
  };

  export type Item_compraScalarFieldEnum = (typeof Item_compraScalarFieldEnum)[keyof typeof Item_compraScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id: 'id',
    data: 'data',
    estado_compra: 'estado_compra'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type cursoWhereInput = {
    AND?: cursoWhereInput | cursoWhereInput[]
    OR?: cursoWhereInput[]
    NOT?: cursoWhereInput | cursoWhereInput[]
    id?: IntFilter<"curso"> | number
    nome?: StringFilter<"curso"> | string
    turno?: StringFilter<"curso"> | string
  }

  export type cursoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
  }

  export type cursoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: cursoWhereInput | cursoWhereInput[]
    OR?: cursoWhereInput[]
    NOT?: cursoWhereInput | cursoWhereInput[]
    nome?: StringFilter<"curso"> | string
    turno?: StringFilter<"curso"> | string
  }, "id">

  export type cursoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
    _count?: cursoCountOrderByAggregateInput
    _avg?: cursoAvgOrderByAggregateInput
    _max?: cursoMaxOrderByAggregateInput
    _min?: cursoMinOrderByAggregateInput
    _sum?: cursoSumOrderByAggregateInput
  }

  export type cursoScalarWhereWithAggregatesInput = {
    AND?: cursoScalarWhereWithAggregatesInput | cursoScalarWhereWithAggregatesInput[]
    OR?: cursoScalarWhereWithAggregatesInput[]
    NOT?: cursoScalarWhereWithAggregatesInput | cursoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"curso"> | number
    nome?: StringWithAggregatesFilter<"curso"> | string
    turno?: StringWithAggregatesFilter<"curso"> | string
  }

  export type produtoWhereInput = {
    AND?: produtoWhereInput | produtoWhereInput[]
    OR?: produtoWhereInput[]
    NOT?: produtoWhereInput | produtoWhereInput[]
    id?: IntFilter<"produto"> | number
    nome?: StringFilter<"produto"> | string
    descricao?: StringFilter<"produto"> | string
    item_compra?: Item_compraListRelationFilter
  }

  export type produtoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    item_compra?: item_compraOrderByRelationAggregateInput
  }

  export type produtoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: produtoWhereInput | produtoWhereInput[]
    OR?: produtoWhereInput[]
    NOT?: produtoWhereInput | produtoWhereInput[]
    nome?: StringFilter<"produto"> | string
    descricao?: StringFilter<"produto"> | string
    item_compra?: Item_compraListRelationFilter
  }, "id">

  export type produtoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    _count?: produtoCountOrderByAggregateInput
    _avg?: produtoAvgOrderByAggregateInput
    _max?: produtoMaxOrderByAggregateInput
    _min?: produtoMinOrderByAggregateInput
    _sum?: produtoSumOrderByAggregateInput
  }

  export type produtoScalarWhereWithAggregatesInput = {
    AND?: produtoScalarWhereWithAggregatesInput | produtoScalarWhereWithAggregatesInput[]
    OR?: produtoScalarWhereWithAggregatesInput[]
    NOT?: produtoScalarWhereWithAggregatesInput | produtoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"produto"> | number
    nome?: StringWithAggregatesFilter<"produto"> | string
    descricao?: StringWithAggregatesFilter<"produto"> | string
  }

  export type item_compraWhereInput = {
    AND?: item_compraWhereInput | item_compraWhereInput[]
    OR?: item_compraWhereInput[]
    NOT?: item_compraWhereInput | item_compraWhereInput[]
    id?: IntFilter<"item_compra"> | number
    quantidade?: IntFilter<"item_compra"> | number
    preco?: FloatFilter<"item_compra"> | number
    produto_id?: IntFilter<"item_compra"> | number
    compra_id?: IntNullableFilter<"item_compra"> | number | null
    produto?: XOR<ProdutoRelationFilter, produtoWhereInput>
    compra?: XOR<CompraNullableRelationFilter, compraWhereInput> | null
  }

  export type item_compraOrderByWithRelationInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    produto_id?: SortOrder
    compra_id?: SortOrderInput | SortOrder
    produto?: produtoOrderByWithRelationInput
    compra?: compraOrderByWithRelationInput
  }

  export type item_compraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: item_compraWhereInput | item_compraWhereInput[]
    OR?: item_compraWhereInput[]
    NOT?: item_compraWhereInput | item_compraWhereInput[]
    quantidade?: IntFilter<"item_compra"> | number
    preco?: FloatFilter<"item_compra"> | number
    produto_id?: IntFilter<"item_compra"> | number
    compra_id?: IntNullableFilter<"item_compra"> | number | null
    produto?: XOR<ProdutoRelationFilter, produtoWhereInput>
    compra?: XOR<CompraNullableRelationFilter, compraWhereInput> | null
  }, "id">

  export type item_compraOrderByWithAggregationInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    produto_id?: SortOrder
    compra_id?: SortOrderInput | SortOrder
    _count?: item_compraCountOrderByAggregateInput
    _avg?: item_compraAvgOrderByAggregateInput
    _max?: item_compraMaxOrderByAggregateInput
    _min?: item_compraMinOrderByAggregateInput
    _sum?: item_compraSumOrderByAggregateInput
  }

  export type item_compraScalarWhereWithAggregatesInput = {
    AND?: item_compraScalarWhereWithAggregatesInput | item_compraScalarWhereWithAggregatesInput[]
    OR?: item_compraScalarWhereWithAggregatesInput[]
    NOT?: item_compraScalarWhereWithAggregatesInput | item_compraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"item_compra"> | number
    quantidade?: IntWithAggregatesFilter<"item_compra"> | number
    preco?: FloatWithAggregatesFilter<"item_compra"> | number
    produto_id?: IntWithAggregatesFilter<"item_compra"> | number
    compra_id?: IntNullableWithAggregatesFilter<"item_compra"> | number | null
  }

  export type compraWhereInput = {
    AND?: compraWhereInput | compraWhereInput[]
    OR?: compraWhereInput[]
    NOT?: compraWhereInput | compraWhereInput[]
    id?: IntFilter<"compra"> | number
    data?: DateTimeFilter<"compra"> | Date | string
    estado_compra?: StringFilter<"compra"> | string
    item_compra?: Item_compraListRelationFilter
  }

  export type compraOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    estado_compra?: SortOrder
    item_compra?: item_compraOrderByRelationAggregateInput
  }

  export type compraWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: compraWhereInput | compraWhereInput[]
    OR?: compraWhereInput[]
    NOT?: compraWhereInput | compraWhereInput[]
    data?: DateTimeFilter<"compra"> | Date | string
    estado_compra?: StringFilter<"compra"> | string
    item_compra?: Item_compraListRelationFilter
  }, "id">

  export type compraOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    estado_compra?: SortOrder
    _count?: compraCountOrderByAggregateInput
    _avg?: compraAvgOrderByAggregateInput
    _max?: compraMaxOrderByAggregateInput
    _min?: compraMinOrderByAggregateInput
    _sum?: compraSumOrderByAggregateInput
  }

  export type compraScalarWhereWithAggregatesInput = {
    AND?: compraScalarWhereWithAggregatesInput | compraScalarWhereWithAggregatesInput[]
    OR?: compraScalarWhereWithAggregatesInput[]
    NOT?: compraScalarWhereWithAggregatesInput | compraScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"compra"> | number
    data?: DateTimeWithAggregatesFilter<"compra"> | Date | string
    estado_compra?: StringWithAggregatesFilter<"compra"> | string
  }

  export type cursoCreateInput = {
    nome: string
    turno: string
  }

  export type cursoUncheckedCreateInput = {
    id?: number
    nome: string
    turno: string
  }

  export type cursoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type cursoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type cursoCreateManyInput = {
    id?: number
    nome: string
    turno: string
  }

  export type cursoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type cursoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    turno?: StringFieldUpdateOperationsInput | string
  }

  export type produtoCreateInput = {
    nome: string
    descricao: string
    item_compra?: item_compraCreateNestedManyWithoutProdutoInput
  }

  export type produtoUncheckedCreateInput = {
    id?: number
    nome: string
    descricao: string
    item_compra?: item_compraUncheckedCreateNestedManyWithoutProdutoInput
  }

  export type produtoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    item_compra?: item_compraUpdateManyWithoutProdutoNestedInput
  }

  export type produtoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    item_compra?: item_compraUncheckedUpdateManyWithoutProdutoNestedInput
  }

  export type produtoCreateManyInput = {
    id?: number
    nome: string
    descricao: string
  }

  export type produtoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type produtoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type item_compraCreateInput = {
    quantidade: number
    preco: number
    produto: produtoCreateNestedOneWithoutItem_compraInput
    compra?: compraCreateNestedOneWithoutItem_compraInput
  }

  export type item_compraUncheckedCreateInput = {
    id?: number
    quantidade: number
    preco: number
    produto_id: number
    compra_id?: number | null
  }

  export type item_compraUpdateInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    produto?: produtoUpdateOneRequiredWithoutItem_compraNestedInput
    compra?: compraUpdateOneWithoutItem_compraNestedInput
  }

  export type item_compraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
    compra_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type item_compraCreateManyInput = {
    id?: number
    quantidade: number
    preco: number
    produto_id: number
    compra_id?: number | null
  }

  export type item_compraUpdateManyMutationInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
  }

  export type item_compraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
    compra_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type compraCreateInput = {
    data: Date | string
    estado_compra: string
    item_compra?: item_compraCreateNestedManyWithoutCompraInput
  }

  export type compraUncheckedCreateInput = {
    id?: number
    data: Date | string
    estado_compra: string
    item_compra?: item_compraUncheckedCreateNestedManyWithoutCompraInput
  }

  export type compraUpdateInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_compra?: StringFieldUpdateOperationsInput | string
    item_compra?: item_compraUpdateManyWithoutCompraNestedInput
  }

  export type compraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_compra?: StringFieldUpdateOperationsInput | string
    item_compra?: item_compraUncheckedUpdateManyWithoutCompraNestedInput
  }

  export type compraCreateManyInput = {
    id?: number
    data: Date | string
    estado_compra: string
  }

  export type compraUpdateManyMutationInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_compra?: StringFieldUpdateOperationsInput | string
  }

  export type compraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_compra?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type cursoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
  }

  export type cursoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type cursoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
  }

  export type cursoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    turno?: SortOrder
  }

  export type cursoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type Item_compraListRelationFilter = {
    every?: item_compraWhereInput
    some?: item_compraWhereInput
    none?: item_compraWhereInput
  }

  export type item_compraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type produtoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
  }

  export type produtoAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type produtoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
  }

  export type produtoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
  }

  export type produtoSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProdutoRelationFilter = {
    is?: produtoWhereInput
    isNot?: produtoWhereInput
  }

  export type CompraNullableRelationFilter = {
    is?: compraWhereInput | null
    isNot?: compraWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type item_compraCountOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    produto_id?: SortOrder
    compra_id?: SortOrder
  }

  export type item_compraAvgOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    produto_id?: SortOrder
    compra_id?: SortOrder
  }

  export type item_compraMaxOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    produto_id?: SortOrder
    compra_id?: SortOrder
  }

  export type item_compraMinOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    produto_id?: SortOrder
    compra_id?: SortOrder
  }

  export type item_compraSumOrderByAggregateInput = {
    id?: SortOrder
    quantidade?: SortOrder
    preco?: SortOrder
    produto_id?: SortOrder
    compra_id?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type compraCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    estado_compra?: SortOrder
  }

  export type compraAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type compraMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    estado_compra?: SortOrder
  }

  export type compraMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    estado_compra?: SortOrder
  }

  export type compraSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type item_compraCreateNestedManyWithoutProdutoInput = {
    create?: XOR<item_compraCreateWithoutProdutoInput, item_compraUncheckedCreateWithoutProdutoInput> | item_compraCreateWithoutProdutoInput[] | item_compraUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutProdutoInput | item_compraCreateOrConnectWithoutProdutoInput[]
    createMany?: item_compraCreateManyProdutoInputEnvelope
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
  }

  export type item_compraUncheckedCreateNestedManyWithoutProdutoInput = {
    create?: XOR<item_compraCreateWithoutProdutoInput, item_compraUncheckedCreateWithoutProdutoInput> | item_compraCreateWithoutProdutoInput[] | item_compraUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutProdutoInput | item_compraCreateOrConnectWithoutProdutoInput[]
    createMany?: item_compraCreateManyProdutoInputEnvelope
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
  }

  export type item_compraUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<item_compraCreateWithoutProdutoInput, item_compraUncheckedCreateWithoutProdutoInput> | item_compraCreateWithoutProdutoInput[] | item_compraUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutProdutoInput | item_compraCreateOrConnectWithoutProdutoInput[]
    upsert?: item_compraUpsertWithWhereUniqueWithoutProdutoInput | item_compraUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: item_compraCreateManyProdutoInputEnvelope
    set?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    disconnect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    delete?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    update?: item_compraUpdateWithWhereUniqueWithoutProdutoInput | item_compraUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: item_compraUpdateManyWithWhereWithoutProdutoInput | item_compraUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: item_compraScalarWhereInput | item_compraScalarWhereInput[]
  }

  export type item_compraUncheckedUpdateManyWithoutProdutoNestedInput = {
    create?: XOR<item_compraCreateWithoutProdutoInput, item_compraUncheckedCreateWithoutProdutoInput> | item_compraCreateWithoutProdutoInput[] | item_compraUncheckedCreateWithoutProdutoInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutProdutoInput | item_compraCreateOrConnectWithoutProdutoInput[]
    upsert?: item_compraUpsertWithWhereUniqueWithoutProdutoInput | item_compraUpsertWithWhereUniqueWithoutProdutoInput[]
    createMany?: item_compraCreateManyProdutoInputEnvelope
    set?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    disconnect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    delete?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    update?: item_compraUpdateWithWhereUniqueWithoutProdutoInput | item_compraUpdateWithWhereUniqueWithoutProdutoInput[]
    updateMany?: item_compraUpdateManyWithWhereWithoutProdutoInput | item_compraUpdateManyWithWhereWithoutProdutoInput[]
    deleteMany?: item_compraScalarWhereInput | item_compraScalarWhereInput[]
  }

  export type produtoCreateNestedOneWithoutItem_compraInput = {
    create?: XOR<produtoCreateWithoutItem_compraInput, produtoUncheckedCreateWithoutItem_compraInput>
    connectOrCreate?: produtoCreateOrConnectWithoutItem_compraInput
    connect?: produtoWhereUniqueInput
  }

  export type compraCreateNestedOneWithoutItem_compraInput = {
    create?: XOR<compraCreateWithoutItem_compraInput, compraUncheckedCreateWithoutItem_compraInput>
    connectOrCreate?: compraCreateOrConnectWithoutItem_compraInput
    connect?: compraWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type produtoUpdateOneRequiredWithoutItem_compraNestedInput = {
    create?: XOR<produtoCreateWithoutItem_compraInput, produtoUncheckedCreateWithoutItem_compraInput>
    connectOrCreate?: produtoCreateOrConnectWithoutItem_compraInput
    upsert?: produtoUpsertWithoutItem_compraInput
    connect?: produtoWhereUniqueInput
    update?: XOR<XOR<produtoUpdateToOneWithWhereWithoutItem_compraInput, produtoUpdateWithoutItem_compraInput>, produtoUncheckedUpdateWithoutItem_compraInput>
  }

  export type compraUpdateOneWithoutItem_compraNestedInput = {
    create?: XOR<compraCreateWithoutItem_compraInput, compraUncheckedCreateWithoutItem_compraInput>
    connectOrCreate?: compraCreateOrConnectWithoutItem_compraInput
    upsert?: compraUpsertWithoutItem_compraInput
    disconnect?: compraWhereInput | boolean
    delete?: compraWhereInput | boolean
    connect?: compraWhereUniqueInput
    update?: XOR<XOR<compraUpdateToOneWithWhereWithoutItem_compraInput, compraUpdateWithoutItem_compraInput>, compraUncheckedUpdateWithoutItem_compraInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type item_compraCreateNestedManyWithoutCompraInput = {
    create?: XOR<item_compraCreateWithoutCompraInput, item_compraUncheckedCreateWithoutCompraInput> | item_compraCreateWithoutCompraInput[] | item_compraUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutCompraInput | item_compraCreateOrConnectWithoutCompraInput[]
    createMany?: item_compraCreateManyCompraInputEnvelope
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
  }

  export type item_compraUncheckedCreateNestedManyWithoutCompraInput = {
    create?: XOR<item_compraCreateWithoutCompraInput, item_compraUncheckedCreateWithoutCompraInput> | item_compraCreateWithoutCompraInput[] | item_compraUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutCompraInput | item_compraCreateOrConnectWithoutCompraInput[]
    createMany?: item_compraCreateManyCompraInputEnvelope
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type item_compraUpdateManyWithoutCompraNestedInput = {
    create?: XOR<item_compraCreateWithoutCompraInput, item_compraUncheckedCreateWithoutCompraInput> | item_compraCreateWithoutCompraInput[] | item_compraUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutCompraInput | item_compraCreateOrConnectWithoutCompraInput[]
    upsert?: item_compraUpsertWithWhereUniqueWithoutCompraInput | item_compraUpsertWithWhereUniqueWithoutCompraInput[]
    createMany?: item_compraCreateManyCompraInputEnvelope
    set?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    disconnect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    delete?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    update?: item_compraUpdateWithWhereUniqueWithoutCompraInput | item_compraUpdateWithWhereUniqueWithoutCompraInput[]
    updateMany?: item_compraUpdateManyWithWhereWithoutCompraInput | item_compraUpdateManyWithWhereWithoutCompraInput[]
    deleteMany?: item_compraScalarWhereInput | item_compraScalarWhereInput[]
  }

  export type item_compraUncheckedUpdateManyWithoutCompraNestedInput = {
    create?: XOR<item_compraCreateWithoutCompraInput, item_compraUncheckedCreateWithoutCompraInput> | item_compraCreateWithoutCompraInput[] | item_compraUncheckedCreateWithoutCompraInput[]
    connectOrCreate?: item_compraCreateOrConnectWithoutCompraInput | item_compraCreateOrConnectWithoutCompraInput[]
    upsert?: item_compraUpsertWithWhereUniqueWithoutCompraInput | item_compraUpsertWithWhereUniqueWithoutCompraInput[]
    createMany?: item_compraCreateManyCompraInputEnvelope
    set?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    disconnect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    delete?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    connect?: item_compraWhereUniqueInput | item_compraWhereUniqueInput[]
    update?: item_compraUpdateWithWhereUniqueWithoutCompraInput | item_compraUpdateWithWhereUniqueWithoutCompraInput[]
    updateMany?: item_compraUpdateManyWithWhereWithoutCompraInput | item_compraUpdateManyWithWhereWithoutCompraInput[]
    deleteMany?: item_compraScalarWhereInput | item_compraScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type item_compraCreateWithoutProdutoInput = {
    quantidade: number
    preco: number
    compra?: compraCreateNestedOneWithoutItem_compraInput
  }

  export type item_compraUncheckedCreateWithoutProdutoInput = {
    id?: number
    quantidade: number
    preco: number
    compra_id?: number | null
  }

  export type item_compraCreateOrConnectWithoutProdutoInput = {
    where: item_compraWhereUniqueInput
    create: XOR<item_compraCreateWithoutProdutoInput, item_compraUncheckedCreateWithoutProdutoInput>
  }

  export type item_compraCreateManyProdutoInputEnvelope = {
    data: item_compraCreateManyProdutoInput | item_compraCreateManyProdutoInput[]
    skipDuplicates?: boolean
  }

  export type item_compraUpsertWithWhereUniqueWithoutProdutoInput = {
    where: item_compraWhereUniqueInput
    update: XOR<item_compraUpdateWithoutProdutoInput, item_compraUncheckedUpdateWithoutProdutoInput>
    create: XOR<item_compraCreateWithoutProdutoInput, item_compraUncheckedCreateWithoutProdutoInput>
  }

  export type item_compraUpdateWithWhereUniqueWithoutProdutoInput = {
    where: item_compraWhereUniqueInput
    data: XOR<item_compraUpdateWithoutProdutoInput, item_compraUncheckedUpdateWithoutProdutoInput>
  }

  export type item_compraUpdateManyWithWhereWithoutProdutoInput = {
    where: item_compraScalarWhereInput
    data: XOR<item_compraUpdateManyMutationInput, item_compraUncheckedUpdateManyWithoutProdutoInput>
  }

  export type item_compraScalarWhereInput = {
    AND?: item_compraScalarWhereInput | item_compraScalarWhereInput[]
    OR?: item_compraScalarWhereInput[]
    NOT?: item_compraScalarWhereInput | item_compraScalarWhereInput[]
    id?: IntFilter<"item_compra"> | number
    quantidade?: IntFilter<"item_compra"> | number
    preco?: FloatFilter<"item_compra"> | number
    produto_id?: IntFilter<"item_compra"> | number
    compra_id?: IntNullableFilter<"item_compra"> | number | null
  }

  export type produtoCreateWithoutItem_compraInput = {
    nome: string
    descricao: string
  }

  export type produtoUncheckedCreateWithoutItem_compraInput = {
    id?: number
    nome: string
    descricao: string
  }

  export type produtoCreateOrConnectWithoutItem_compraInput = {
    where: produtoWhereUniqueInput
    create: XOR<produtoCreateWithoutItem_compraInput, produtoUncheckedCreateWithoutItem_compraInput>
  }

  export type compraCreateWithoutItem_compraInput = {
    data: Date | string
    estado_compra: string
  }

  export type compraUncheckedCreateWithoutItem_compraInput = {
    id?: number
    data: Date | string
    estado_compra: string
  }

  export type compraCreateOrConnectWithoutItem_compraInput = {
    where: compraWhereUniqueInput
    create: XOR<compraCreateWithoutItem_compraInput, compraUncheckedCreateWithoutItem_compraInput>
  }

  export type produtoUpsertWithoutItem_compraInput = {
    update: XOR<produtoUpdateWithoutItem_compraInput, produtoUncheckedUpdateWithoutItem_compraInput>
    create: XOR<produtoCreateWithoutItem_compraInput, produtoUncheckedCreateWithoutItem_compraInput>
    where?: produtoWhereInput
  }

  export type produtoUpdateToOneWithWhereWithoutItem_compraInput = {
    where?: produtoWhereInput
    data: XOR<produtoUpdateWithoutItem_compraInput, produtoUncheckedUpdateWithoutItem_compraInput>
  }

  export type produtoUpdateWithoutItem_compraInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type produtoUncheckedUpdateWithoutItem_compraInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type compraUpsertWithoutItem_compraInput = {
    update: XOR<compraUpdateWithoutItem_compraInput, compraUncheckedUpdateWithoutItem_compraInput>
    create: XOR<compraCreateWithoutItem_compraInput, compraUncheckedCreateWithoutItem_compraInput>
    where?: compraWhereInput
  }

  export type compraUpdateToOneWithWhereWithoutItem_compraInput = {
    where?: compraWhereInput
    data: XOR<compraUpdateWithoutItem_compraInput, compraUncheckedUpdateWithoutItem_compraInput>
  }

  export type compraUpdateWithoutItem_compraInput = {
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_compra?: StringFieldUpdateOperationsInput | string
  }

  export type compraUncheckedUpdateWithoutItem_compraInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_compra?: StringFieldUpdateOperationsInput | string
  }

  export type item_compraCreateWithoutCompraInput = {
    quantidade: number
    preco: number
    produto: produtoCreateNestedOneWithoutItem_compraInput
  }

  export type item_compraUncheckedCreateWithoutCompraInput = {
    id?: number
    quantidade: number
    preco: number
    produto_id: number
  }

  export type item_compraCreateOrConnectWithoutCompraInput = {
    where: item_compraWhereUniqueInput
    create: XOR<item_compraCreateWithoutCompraInput, item_compraUncheckedCreateWithoutCompraInput>
  }

  export type item_compraCreateManyCompraInputEnvelope = {
    data: item_compraCreateManyCompraInput | item_compraCreateManyCompraInput[]
    skipDuplicates?: boolean
  }

  export type item_compraUpsertWithWhereUniqueWithoutCompraInput = {
    where: item_compraWhereUniqueInput
    update: XOR<item_compraUpdateWithoutCompraInput, item_compraUncheckedUpdateWithoutCompraInput>
    create: XOR<item_compraCreateWithoutCompraInput, item_compraUncheckedCreateWithoutCompraInput>
  }

  export type item_compraUpdateWithWhereUniqueWithoutCompraInput = {
    where: item_compraWhereUniqueInput
    data: XOR<item_compraUpdateWithoutCompraInput, item_compraUncheckedUpdateWithoutCompraInput>
  }

  export type item_compraUpdateManyWithWhereWithoutCompraInput = {
    where: item_compraScalarWhereInput
    data: XOR<item_compraUpdateManyMutationInput, item_compraUncheckedUpdateManyWithoutCompraInput>
  }

  export type item_compraCreateManyProdutoInput = {
    id?: number
    quantidade: number
    preco: number
    compra_id?: number | null
  }

  export type item_compraUpdateWithoutProdutoInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    compra?: compraUpdateOneWithoutItem_compraNestedInput
  }

  export type item_compraUncheckedUpdateWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    compra_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type item_compraUncheckedUpdateManyWithoutProdutoInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    compra_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type item_compraCreateManyCompraInput = {
    id?: number
    quantidade: number
    preco: number
    produto_id: number
  }

  export type item_compraUpdateWithoutCompraInput = {
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    produto?: produtoUpdateOneRequiredWithoutItem_compraNestedInput
  }

  export type item_compraUncheckedUpdateWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type item_compraUncheckedUpdateManyWithoutCompraInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantidade?: IntFieldUpdateOperationsInput | number
    preco?: FloatFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProdutoCountOutputTypeDefaultArgs instead
     */
    export type ProdutoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompraCountOutputTypeDefaultArgs instead
     */
    export type CompraCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompraCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cursoDefaultArgs instead
     */
    export type cursoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cursoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use produtoDefaultArgs instead
     */
    export type produtoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = produtoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use item_compraDefaultArgs instead
     */
    export type item_compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = item_compraDefaultArgs<ExtArgs>
    /**
     * @deprecated Use compraDefaultArgs instead
     */
    export type compraArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = compraDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}